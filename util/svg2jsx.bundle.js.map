{"version":3,"sources":["../svg2jsx.js"],"names":[],"mappings":"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","file":"svg2jsx.bundle.js","sourcesContent":["import fs from \"fs\";\nimport nodePath from \"path\";\n\nconst svg2jsx = function(dir, outDir) {\n  var needle = \".svg\";\n\n  const svgWhiteList = [\n    \"rect\",\n    \"path\",\n    \"polygon\",\n    \"circle\",\n    \"ellipse\",\n    \"line\",\n    \"g\",\n    \"/g\"\n  ];\n\n  const rePx = new RegExp(\"\\\\d\\\\d(?=px)\");\n\n  if (!fs.existsSync(dir)) {\n    return console.log(\"Directory \" + dir + \" does not exist.\");\n  }\n  if (!fs.existsSync(outDir)) {\n    return console.log(\"Directory \" + outDir + \" does not exist.\");\n  }\n\n  const allIconsOut = fs.createWriteStream(outDir + \"/icons.js\", {\n    encoding: \"utf8\"\n  });\n\n  allIconsOut.write(\"import React from 'react';\\n /*test1*/ \\n\");\n\n  const allIconNamesOut = fs.createWriteStream(outDir + \"/iconNames.js\", {\n    encoding: \"utf8\"\n  });\n\n  let iconNames = [];\n\n  const haystack = fs.readdirSync(dir);\n\n  for (var s = 0; s < haystack.length; s++) {\n    let path = dir + \"/\" + haystack[s];\n    let stats = fs.statSync(path);\n\n    if (stats.isDirectory()) {\n      process(path);\n    } else if (path.indexOf(needle) >= 0) {\n      console.log(path);\n\n      var svgData = fs.readFileSync(path, \"utf8\");\n\n      svgData = svgData.replace(/stroke-width/g, \"strokeWidth\");\n      svgData = svgData.replace(/stroke-linecap/g, \"strokeLinecap\");\n      svgData = svgData.replace(/stroke-miterlimit/g, \"strokeMiterlimit\");\n      svgData = svgData.replace(/fill-opacity/g, \"fillOpacity\");\n      svgData = svgData.replace(/clip-path/g, \"clipPath\");\n      svgData = svgData.replace(/fill-rule/g, \"fillRule\");\n\n      //console.log('svgData: ', svgData);\n\n      const inFileName = nodePath.basename(path);\n\n      let iconName = inFileName.replace(\"icon_\", \"\");\n\n      iconName = iconName.replace(/(_\\d\\dpx\\.svg)/, \"\");\n      iconName = camelCase(iconName);\n\n      if (iconNames[iconNames.length - 1] !== iconName) {\n        iconNames.push(iconName);\n      }\n\n      // the size of the svg derived from the file name\n      let pxSize = rePx.exec(inFileName);\n      pxSize = pxSize ? pxSize[0] : \"\";\n\n      const outFileName = \"icon_\" + iconName + \"_\" + pxSize + \"px.js\";\n\n      console.log(iconName + pxSize);\n\n      // get orginal svg's viewbox\n      var viewBox = \"0 0 \" + pxSize + \" \" + pxSize;\n      var srcViewBox = svgData.match(/viewBox=['\"](\\d* \\d* \\d* \\d*)['\"]/);\n      if (srcViewBox) {\n        viewBox = srcViewBox[1];\n      }\n\n      //console.log('viewBox: ', viewBox);\n\n      const iconSizeName = `${iconName}${pxSize}`;\n\n      let translatedSvg = \"\";\n\n      svgData.split(/\\r?\\n/).forEach(function(line) {\n        if (isOnWhiteList(line, svgWhiteList)) {\n          console.log(line);\n\n          // if the svg elements has an opacity set, do not replace the color\n          if (line.indexOf(\"opacity\") === -1) {\n            line = line.replace(\n              /fill=['\"]#([0-9A-Fa-f]{1,2}){3}['\"]/g,\n              \"className='iconoclass__fill' fill={props.round ? 'black' : 'currentColor'}\"\n            );\n            line = line.replace(\n              /stroke=['\"]#([0-9A-Fa-f]{1,2}){3}['\"]/g,\n              \"className='iconoclass__stroke' stroke={props.round ? 'black' : 'currentColor'}\"\n            );\n          } else {\n            console.log('Found \"opacity\" - Not changing color in: ', line);\n          }\n          // jsxOut.write(line + \"\\n\");\n          // allIconsOut.write(line + \"\\n\");\n          translatedSvg += `${line}\\n`;\n        }\n      });\n\n      let templateStart = `\n\t\t\t\texport function ${iconSizeName}(props){\n\t\t\t\t\tconst renderTranslatedSvg = () => {\n\t\t\t\t\t\treturn (<React.Fragment>${translatedSvg}</React.Fragment>);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<svg className='iconoclass__svg iconoclass__fill' \n\t\t\t\t\t\t\tstyle={{position: 'absolute', top:'0', left:'0' }} \n\t\t\t\t\t\t\tpreserveAspectRatio='xMidYMin' color={props.color ? props.color : 'currentColor'} \n\t\t\t\t\t\t\tfill='currentColor' viewBox={props.round ? '0 0 24 24' : '${viewBox}'} width={props.size} height={props.size}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{props.round  \n\t\t\t\t\t\t\t\t? (<g>\n\t\t\t\t\t\t\t\t\t\t<circle cx=\"50%\" cy=\"50%\" r=\"50%\" fill={props.color} mask=\"url(#${iconName}_mask)\"/>\n\t\t\t\t\t\t\t\t\t\t<mask id=\"${iconName}_mask\">\n\t\t\t\t\t\t\t\t\t\t\t<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"white\" />\n\t\t\t\t\t\t\t\t\t\t\t<svg x=\"16.66%\" y=\"16.66%\" width=\"66%\" height=\"66%\" viewBox='${viewBox}' color={props.round ? 'black' : 'currentColor'}>\n\t\t\t\t\t\t\t\t\t\t\t\t{renderTranslatedSvg()}\n\t\t\t\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t\t\t\t</mask>\n\t\t\t\t\t\t\t\t\t</g>)\n\t\t\t\t\t\t\t\t: (\n\t\t\t\t\t\t\t\t\t<g>\n\t\t\t\t\t\t\t\t\t\t{renderTranslatedSvg()}\n\t\t\t\t\t\t\t\t\t</g>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t`;\n\n      const templateEnd = \"\";\n\n      // each icon is converted to individual jsx file for individual imports\n      var jsxOut = fs.createWriteStream(outDir + \"/\" + outFileName, {\n        encoding: \"utf8\"\n      });\n\n      jsxOut.write(`import React from 'react';\\n` + templateStart);\n\n      // all the icons combined for a single import\n      allIconsOut.write(templateStart);\n\n      //jsxOut.write(translatedSvg);\n      //allIconsOut.write(translatedSvg);\n\n      jsxOut.write(templateEnd);\n      allIconsOut.write(templateEnd);\n      jsxOut.end();\n    }\n  }\n  console.log(\"names: \", JSON.stringify(iconNames));\n  allIconNamesOut.write(\"export default \" + JSON.stringify(iconNames));\n  allIconNamesOut.end();\n  allIconsOut.end();\n};\n\nfunction isOnWhiteList(svgString, whiteList) {\n  var result = false;\n  whiteList.forEach(function(svgEnt) {\n    var re = new RegExp(\"<\" + svgEnt + \"(.*)>\");\n    if (re.test(svgString)) result = true;\n  });\n  return result;\n}\n\nfunction camelCase(input) {\n  var result = input.toLowerCase().replace(/-(.)/g, function(match, group1) {\n    return group1.toUpperCase();\n  });\n  return result.replace(/_(.)/g, function(match, group1) {\n    return group1.toUpperCase();\n  });\n}\n// svg input path, jsx output path, search string\nsvg2jsx(process.argv[2], process.argv[3]);\n"]}